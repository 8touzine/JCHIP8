plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'org.touzin8'
version '1.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.touzin8.jchip8'
    mainClass = 'org.touzin8.jchip8.Chip8'
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.38'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    // Génère un zip de l'image runtime pour distribution
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")

    // Options jlink pour optimiser l'image
    options = [
            '--strip-debug',       // supprime infos debug
            '--compress', '2',     // compresse l'image
            '--no-header-files',
            '--no-man-pages'
    ]

    // Nom de l'exécutable généré
    launcher {
        name = 'jchip8'
    }

    // Configuration jpackage (packaging en installateur natif)
    jpackage {
        installerType = 'exe'          // pour Windows, adapte selon OS : dmg, pkg, deb...
        installerOptions = [
                '--win-menu',              // crée une entrée menu démarrer Windows
                '--win-shortcut'           // crée un raccourci bureau Windows
        ]
        // Tu peux ajouter ici :
        // installerName = 'JCHIP8-Emulator'  // nom de l'installateur
        // appVersion = '1.0.0'                // version affichée
    }


}

jlinkZip {
    group = 'distribution'
}

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClass.get()
        )
    }

    from {
        configurations.runtimeClasspath.findAll {
            !it.name.startsWith("javafx") &&
                    !it.name.toLowerCase().contains("lombok")
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    archiveBaseName.set("jchip8-fat")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}